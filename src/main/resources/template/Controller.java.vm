package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.exception.ExceptionUtils;
import javax.servlet.http.HttpServletResponse;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.education.platform.common.query.QueryViewVo;
import org.education.platform.common.util.ExcelUtil;
import org.education.platform.common.bean.PageResult;
import org.education.platform.common.bean.Result;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}Service;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Slf4j
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    @RequestMapping("/list")
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public Result list(@RequestBody QueryViewVo queryViewVo) {
        PageResult page = PageResult.convert(${classname}Service.selectPage(queryViewVo.toSearchable()));
        return Result.ok().put("page",page);
    }

    @RequestMapping("/view/{${pk.attrname}}")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public Result view(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
	    ${className} ${classname} = ${classname}Service.getById(${pk.attrname});
        return Result.ok().put("${classname}", ${classname});
    }

    @RequestMapping("/save")
    @RequiresPermissions("${moduleName}:${pathName}:save")
    public Result save(@RequestBody ${className} ${classname}){
	    ${classname}Service.saveOrUpdate(${classname});
        return Result.ok();
    }

    @RequestMapping("/update")
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public Result update(@RequestBody ${className} ${classname}){
		${classname}Service.updateById(${classname});
        return Result.ok();
    }

    @RequestMapping("/delete")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public Result delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.deleteBatchIds(Arrays.asList(${pk.attrname}s));
        return Result.ok();
    }


    @RequestMapping("/download")
    @RequiresPermissions("${moduleName}:${pathName}:download")
    public void download(HttpServletResponse response, QueryViewVo queryViewVo) {
        try {
            List<${className}> download = ${classname}Service.selectList(queryViewVo.toSearchable());
            XSSFWorkbook sfworkbook = new XSSFWorkbook();
            ExcelUtil excelUtil = new ExcelUtil();
            SXSSFWorkbook createWorkbook = excelUtil.createWorkbook(sfworkbook);
            ExcelUtil.WriteExcel<${className}> writeexcel = new  ExcelUtil.WriteExcel<${className}>() {

                @Override
                public void writeHead(XSSFRow contentxfrow) {
                    #foreach($column in $columns)
                        #set($num=$velocityCount)
                        #set($num=$num - 1)
                        XSSFCell createCell${velocityCount} = contentxfrow.createCell(${num});
                        createCell${velocityCount}.setCellValue("${column.comments}");
                    #end
                }

                @Override
                public void write(XSSFRow contentxfrow, ${className} t) {
                    #foreach($column in $columns)
                        #set($num=$velocityCount)
                        #set($num=$num - 1)
                        XSSFCell createCell${velocityCount} = contentxfrow.createCell(${num});
                        createCell${velocityCount}.setCellValue(t.get${column.attrName}());
                    #end
                }
            };
            excelUtil.createHead(sfworkbook, createWorkbook, writeexcel);
            excelUtil.writeXlsFile(sfworkbook, createWorkbook, download, writeexcel);
            /**
             * 保存文件
             */
            String saveXlsFile = excelUtil.saveXlsFile(sfworkbook);
            excelUtil.sendExcel(response, saveXlsFile);
        } catch (Exception e) {
            log.error(ExceptionUtils.getStackTrace(e));
        }
    }
}
